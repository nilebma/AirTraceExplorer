<?xml version="1.0" encoding="utf-8"?>
<timeline1:TraceLineWrapperBase xmlns:fx="http://ns.adobe.com/mxml/2009"
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:timeline="ui.trace.timeline.*"
		   xmlns:traceSelector="traceSelector.*"
           clipAndEnableScrolling="true"
		   width="100%" 
		   currentState="small"
		   height="314" height.small="40" xmlns:timeline1="ui.timeline.*">
	<fx:Script>
		<![CDATA[
			import com.ithaca.traces.Obsel;
			import com.ithaca.traces.ObselCollection;
			
			import mx.containers.Canvas;
			import mx.core.UIComponent;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			
			import spark.components.Group;
			
			import traceSelector.dummyTraceSelector;
			
			import ui.trace.timeline.PlayLineRenders.PlayHead;
			import ui.trace.timeline.PlayLineRenders.PlayHeadWithTime;
			import ui.trace.timeline.TimelineModel;
			import ui.trace.timeline.TraceLineRenderers.RectangleRenderer;
			import ui.trace.timeline.events.TimelineEvent;
            
			/*[bindable]
			public var _timeAndPlayManager:TimeAndPlayManager;
			
			public function get timeAndPlayManager():TimeAndPlayManager
			{
				return _timeAndPlayManager;
			}
			
			public function set timeAndPlayManager(value:TimeAndPlayManager):void
			{
					_timeAndPlayManager = value;
			}*/
			
			[bindable]
			public var _currentTime:Number;
			
			public function get currentTime():Number
			{
				return _currentTime;
			}
			
			public function set currentTime(value:Number):void
			{
				//marche seulement si set currentTime appele a chaque fois
				_currentTime = value;
				trace("toto");
				verticalPlayLine.currentTime=the2DTraceLine.getMediaTimeFromActivityTime(currentTime);
			}
			
            protected function editButton_clickHandler(event:MouseEvent):void
            {
                if(this.currentState != "edition")
                    this.setCurrentState("edition");
                else
                    this.setCurrentState("small");
            }
            
			
			
            override public function set traceData(value:ObselCollection):void
            {
                super.traceData = value;
                theSelectionEditor.obsels = value;
                the2DTraceLine.traceData = value;
				verticalPlayLine.stopTime=the2DTraceLine.getMaxCalculatedMediaTimeFromObsels(traceData);
				trace(the2DTraceLine.getMaxCalculatedMediaTimeFromObsels(traceData));
            }
            
			/*override protected function oncreationCompleteHandler(event:FlexEvent):void
			{
				super.oncreationCompleteHandler(event);
				if(the2DTraceLine)
					the2DTraceLine.addEventListener("obselClick", theTraceLine_obselClickHandler);
				
			}*/

            
            [Bindable]
            public function get selector():dummyTraceSelector
            {
                return theSelectionEditor.theSelector;
            }
            
            public function set selector(value:dummyTraceSelector):void
            {
                theSelectionEditor.theSelector = value;
            }
            
            // Override styleChanged() to proopgate style changes to compLabelDisplay.
            override public function styleChanged(styleName:String):void {
               
                if(styleName == "small" || styleName == "edition" || styleName == "view2D")
                    super.styleChanged(styleName);
                
            }
			

            
            protected function view2DButton_clickHandler(event:MouseEvent):void
            {
                // TODO Auto-generated method stub
                if(this.currentState != "view2D")
                    this.setCurrentState("view2D");
                else
                    this.setCurrentState("small");
            }
            
            
            //EXPOSITION OF SETTER METHOD FOR THE 2D TRACELINE 
            
            override public function set timeRange(value:TimeRange):void
            {
                super.timeRange = value;
                the2DTraceLine.timeRange = value;
            }
            
            override public function set endPadding(value:Number):void
            {
                super.endPadding = value;
                the2DTraceLine.endPadding = value;
            }
            
            override public function set startPadding(value:Number):void
            {
                super.startPadding = value;
                the2DTraceLine.startPadding = value;
            }
            
            override public function set deltaPos(value:Number):void
            {
                the2DTraceLine.deltaPos = value;
            }
            
            override public function set renderAlign(value:String):void
            {
                super.renderAlign = value;
                the2DTraceLine.renderAlign = value;
            }
            
            
            override public function set startEndMatchingProperty(value:String):void
            {
                super.startEndMatchingProperty = value;
                the2DTraceLine.startEndMatchingProperty = value;
            }
            
            override public function set endTraceFilter(value:Object):void
            {
                super.endTraceFilter = value;
                the2DTraceLine.endTraceFilter = value;
            }
            
            override public function set traceFilter(value:Object):void
            {
                super.traceFilter = value;
                the2DTraceLine.traceFilter = value;
            }
            
            override public function invalidateDisplayListOnEvent(e:Event):void
            {
                super.invalidateDisplayListOnEvent(e);
                the2DTraceLine.invalidateDisplayListOnEvent(e);
            }
            
            override public function set direction(value:String):void
            {
                super.direction = value;
                the2DTraceLine.direction = value;
            }
            
            override public function set stopTime(value:Number):void
            {
                super.stopTime = value;
                the2DTraceLine.stopTime = value;
            }
            
            override public function onTraceDataCollectionChange(e:CollectionEvent):void
            {
                super.onTraceDataCollectionChange(e);
                the2DTraceLine.onTraceDataCollectionChange(e);
            }
            
            override public function reset(e:Event = null):void
            {
                super.reset(e);
                the2DTraceLine.reset(e);
            }
            
            override public function set startTime(value:Number):void
            {
                super.startTime = value;
                the2DTraceLine.startTime = value;
            }
            
            override public function timeChanged(n:Number):void
            {
                super.timeChanged(n);
                the2DTraceLine.timeChanged(n);
            }
            
			protected function button1_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				verticalPlayLine.stopTime=the2DTraceLine.getMaxCalculatedMediaTimeFromObsels(traceData);
				//the2DTraceLine.getMaxCalculatedMediaTimeFromObsels(traceData)
			}
			
		]]>
	</fx:Script>
    <timeline1:states>
        <s:State name="small"/>
        <s:State name="edition"/>
        <s:State name="view2D"/>
    </timeline1:states>

	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
    
    <s:BorderContainer width="100%" height="314" cornerRadius="10"
					   x.small="2" y.small="0" height.small="40">
        <s:backgroundFill>
            <s:LinearGradient id="gradient1" rotation="90">
                <s:entries>
                    <s:GradientEntry color="0xEEEEFF" alpha="0.7"/>
                    <s:GradientEntry color="0x8888AA" alpha="0.7" />
                </s:entries>
            </s:LinearGradient>
        </s:backgroundFill>
		<timeline:PlayLine id="verticalPlayLine" height="20" borderColor="0x0000FF"
						   borderStyle="solid" borderVisible="true" currentTime="500"
						   direction="vertical" renderAlign="middle"
						   RendererType="{PlayHeadWithTime}" startTime="1" stopTime="1000"
						   visible.edition="false" left.edition="120" right.edition="1152"
						   top.edition="20" borderVisible.edition="false"
						   left.small="120" right.small="25" top.small="20"
						   borderVisible.small="false"
						   x.view2D="80" y.view2D="10" width.view2D="72" height.view2D="298"
						   borderVisible.view2D="false" dropShadowVisible.view2D="false"/>
		<timeline:BitmapTraceAndMediaViewerTraceLine id="the2DTraceLine" visible="false" height="300"
													 borderColor="0xFF0000" borderStyle="solid"
													 borderVisible="true" direction="horizontal"
													 endPadding="10"
													 obselClick="theTraceLine_obselClickHandler(event)"
													 rendererFunctionParams="{{'color':0x0000FF, 'minSize':6}}"
													 startPadding="10"
													 traceFilter="{theSelectionEditor.theSelector}"
													 left.edition="120" right.edition="10"
													 top.edition="10"
													 left.small="120" right.small="10"
													 top.small="10"
													 visible.view2D="true" left.view2D="116"
													 right.view2D="12" top.view2D="6"/>
    </s:BorderContainer>
	<timeline:TraceLineBitmap id="theTraceLine" left="120" right="10" top="10" height="10"
						direction="horizontal" startPadding="10" endPadding="10"
						rendererFunctionParams="{{'color':0x0000FF, 'minSize':3}}"
						traceFilter="{theSelectionEditor.theSelector}" 
						borderColor="0xFF0000" borderVisible="true" borderStyle="solid" visible = "true" visible.view2D="false" />
	<!--<timeline:CurseurVertical id="curseur" x="33" y="24" width="43" height="{previewTimelineContainer.height - 28}" 
							  startEdge="24" endEdge="{previewTimelineContainer.height - 28}"  
							  minimumSize="70" lockSize="70" lockPosition="35"
							  startTime="{_model.startTime}"
							  stopTime="{_model.stopTime}" 
							  startAndEndDelta="3"
							  currentTime="{_model.currentTime}"
							  zoomChange="updateZoomToContextEffect()"
							  locked="true"/>-->
	<!--<timeline:CurseurVertical id="curseur" x="33" y="24" width="43" height="{previewTimelineContainer.height - 28}" 
							  startEdge="24" endEdge="{previewTimelineContainer.height - 28}"  
							  minimumSize="70" lockSize="70" lockPosition="35"
							  startTime="{_model.startTime}"
							  stopTime="{_model.stopTime}" 
							  startAndEndDelta="3"
							  currentTime="{_model.currentTime}"
							  zoomChange="updateZoomToContextEffect()"
							  locked="true"/>-->
	<mx:Canvas left="5" top="5" width="110" height="30" backgroundColor="#CDD3C5" cornerRadius="10"
			   horizontalScrollPolicy="off" verticalScrollPolicy="off"
			   left.view2D="5" top.view2D="5" width.view2D="88">
		<s:Label x="10" y="5" fontSize="10" text="{data.selector.name}"/>
        <mx:HBox x="5" y="12" width="100%" height="15"
                  horizontalGap="0" >
                
            <mx:LinkButton id="editButton" click="editButton_clickHandler(event)" color="#00078E"
                                    fontSize="9" textDecoration="underline"
                                    label.edition="Close Edition"
                                     label="Edit"/>
            
            <mx:LinkButton id="view2DButton" click="view2DButton_clickHandler(event)" color="#00078E"
                           fontSize="9" textDecoration="underline"
                            label="2D"
                           label.view2D="close 2D"/>
            <mx:LinkButton  label="Delete" id="deleteButton" color="#00078E" fontSize="9" textDecoration="underline" click="deleteButton_clickHandler(event)"/>
		</mx:HBox>
	</mx:Canvas>
	<traceSelector:dummyTraceSelectorEditor theSelector="{data.selector}" id="theSelectionEditor" visible.edition="true" visible="false"  x="10" y="43">
	</traceSelector:dummyTraceSelectorEditor>
    
</timeline1:TraceLineWrapperBase>
