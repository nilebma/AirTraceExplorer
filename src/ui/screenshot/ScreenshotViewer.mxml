<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:screenshotservice="services.screenshotservice.*"
		 width="100%" height="100%" currentState="State1" creationComplete="onCreationComplete(event)">
    
    <fx:Metadata>
        [Event(name="currentTimeChange", type="org.osmf.events.TimeEvent")]
    </fx:Metadata>
	<fx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.controls.TextArea;
            import mx.core.FlexGlobals;
            import mx.events.CollectionEvent;
            import mx.events.FlexEvent;
            import mx.rpc.events.ResultEvent;
            import mx.states.RemoveChild;
            
            import org.osmf.events.TimeEvent;
            
            import spark.components.Image;
            import spark.components.supportClasses.SkinnableTextBase;
            
            import valueObjects.VOScreenshot;

			private var _currentTime:Number = NaN;
			
			private var _traceUris:ArrayCollection;
			
			private var mapTimeToScreenshotUrl:Dictionary;
			private var arTimes:Array;
			
            public var currentScreenshotTime:Number = NaN;
            public var currentScreenshotUrl:String = null;
            
            public var currentFullSreenImage:Image;
            public var lastFullSreenImage:Image;
            
            public var theImage:Image = null;
            public var lastImage:Image = null;


			[Bindable]
			public function get traceUris():ArrayCollection
			{
				return _traceUris;
			}

			public function set traceUris(value:ArrayCollection):void
			{
				_traceUris = value;
				if(_traceUris)
				{
					_traceUris.addEventListener(CollectionEvent.COLLECTION_CHANGE, onTraceUrisChange);
					onTraceUrisChange();
				}

                if(theImage)
				    theImage.source = null;
			}
			
			protected function onTraceUrisChange(e:Event = null):void
			{
				currentState = "loadingList";
				getScreenshotByTraceUrisResult.token = screenshotService.getScreenshotByTraceUris(_traceUris);
			}

			[Bindable]
			public function get currentTime():Number
			{
				return _currentTime;
			}

			public function set currentTime(value:Number):void
			{
				_currentTime = value;
				updateImage();
			}

			
			protected function list_creationCompleteHandler(event:FlexEvent):void
			{
				
			}
			
			protected function listScreenshotReady(event:ResultEvent):void
			{
				mapTimeToScreenshotUrl = new Dictionary();
				arTimes = new Array();
				
				for each(var s:VOScreenshot in getScreenshotByTraceUrisResult.lastResult)
				{
					mapTimeToScreenshotUrl[s.time] = s.filename;
					arTimes.push(s.time);
				}
				
				arTimes.sort(Array.NUMERIC);
				currentState = "showing";
				updateImage();
			}
			
			protected function updateImage():void
			{
                if(!isNaN(_currentTime) && getScreenshotByTraceUrisResult.lastResult  && this.currentState != "loadingList")
                {
					currentScreenshotTime = findClosestSmaller(arTimes,_currentTime);

                    if(!isNaN(currentScreenshotTime))
                    {
    				    var url:String = mapTimeToScreenshotUrl[currentScreenshotTime];
    					
    					if(url != currentScreenshotUrl)
    					{
                            currentScreenshotUrl = url; 
                            
                            if(lastImage)
                                theImageBox.removeElement(lastImage);
                            
                            lastImage = theImage;
                            
                            theImage = new Image();
                            theImage.width = theImageBox.width;
                            theImage.height = theImageBox.height;
                            theImage.x = 0;
                            theImage.y = 0;
                            theImage.source = url;
                            theImageBox.addElement(theImage);
                            
                            if(currentFullSreenImage)
                            {
                                goFullscreen();
                            }
                        }
    				}
                } 
			}
         
             
			
			protected function findClosestSmaller(ar:Array, n:Number, start:Number = NaN, end:Number = NaN):Number
			{
				if(isNaN(start))
					return findClosestSmaller(ar,n,0,arTimes.length-1)
				else if(start == end)
					return ar[start];
				else
				{
					var middle:Number = Math.floor((end-start)/2);
					
					if(middle >= 1)
					{
						middle += start;
						
						if(ar[middle] > n)
							return findClosestSmaller(ar,n,start, middle);
						else
							return findClosestSmaller(ar,n,middle, end);
					}
					else
						return ar[start];
				}
			}
			
            protected function gotoNextScreenshot(event:Event = null):void
            {
                // TODO Auto-generated method stub
                var currentScreenShotIndex = arTimes.indexOf(currentScreenshotTime);
                
                if(currentScreenShotIndex >= 0)
                {
                    currentScreenShotIndex++;
                    
                    if(currentScreenShotIndex > arTimes.length-1)
                        currentScreenShotIndex = arTimes.length - 1;
                    
                    currentTime = arTimes[currentScreenShotIndex];
                    fireTimeChangeEvent(currentTime);              
                }

            }
            
            protected function gotoPreviousScreenshot(event:Event = null):void
            {
                // TODO Auto-generated method stub
                var currentScreenShotIndex = arTimes.indexOf(currentScreenshotTime);
                
                if(currentScreenShotIndex >= 0)
                {
                    currentScreenShotIndex--;
                    
                    if(currentScreenShotIndex < 0)
                        currentScreenShotIndex = 0;
                        
                    currentTime = arTimes[currentScreenShotIndex];
                    fireTimeChangeEvent(currentTime);                                  
                }
            }
            
            protected function goFullscreen(event:Event = null):void                
            {
                if(!currentFullSreenImage || currentFullSreenImage.source != currentScreenshotUrl)
                {
             
                    if(lastFullSreenImage && mx.core.FlexGlobals.topLevelApplication.getElementIndex(lastFullSreenImage) >= 0)
                        mx.core.FlexGlobals.topLevelApplication.removeElement(lastFullSreenImage);
                        
                    lastFullSreenImage = currentFullSreenImage;
    
                    currentFullSreenImage = new Image();
                    currentFullSreenImage.width = FlexGlobals.topLevelApplication.width - 60;
                    currentFullSreenImage.height = FlexGlobals.topLevelApplication.height - 40;
                    currentFullSreenImage.x = 30;
                    currentFullSreenImage.y = 20;
                    
                    currentFullSreenImage.source = currentScreenshotUrl;
                    //theImage.invalidateDisplayList();
                    //theImage.validateNow();
                }
                
                mx.core.FlexGlobals.topLevelApplication.addElement(currentFullSreenImage);
            }
            
            protected function leaveFullscreen(event:Event = null):void                
            {
                if(currentFullSreenImage && mx.core.FlexGlobals.topLevelApplication.getElementIndex(currentFullSreenImage) >= 0)
                {
                    mx.core.FlexGlobals.topLevelApplication.removeElement(currentFullSreenImage);
                    currentFullSreenImage = null;
                }
                
                if(lastFullSreenImage && mx.core.FlexGlobals.topLevelApplication.getElementIndex(lastFullSreenImage) >= 0)
                {
                    mx.core.FlexGlobals.topLevelApplication.removeElement(lastFullSreenImage);
                    lastFullSreenImage = null;
                }
            }
            
            
            protected function fireTimeChangeEvent(time:Number):void
            {
                this.dispatchEvent(new TimeEvent("currentTimeChange",false,false,time));
            }
            

            
            protected function onCreationComplete(event:FlexEvent):void
            {
                stage.addEventListener(KeyboardEvent.KEY_DOWN,keyboardDownHandler);
                stage.addEventListener(KeyboardEvent.KEY_UP,keyboardUpHandler);
                
            }
            
            protected function keyboardDownHandler(e:KeyboardEvent):void
            {
                if(e.target is SkinnableTextBase || e.target is TextArea || e.target is TextField)
                    return;
                else
                {
                    if(e.keyCode == 39)
                        gotoNextScreenshot();
                    
                    if(e.keyCode == 37)
                        gotoPreviousScreenshot();
                    
                    if(e.keyCode == 32)
                        goFullscreen();
                    
                }
                    
            }
            
            protected function keyboardUpHandler(e:KeyboardEvent):void
            {
                if(e.target is SkinnableTextBase || e.target is TextArea || e.target is TextField)
                    return;
                else
                {
                    if(e.keyCode == 32)
                        leaveFullscreen();
                }
                
                
            }
        ]]>
	</fx:Script>
	<s:states>
		<s:State name="State1"/>
		<s:State name="loadingList"/>
		<s:State name="showing"/>
	</s:states>
	<fx:Declarations>
		<s:CallResponder id="getScreenshotByTraceUrisResult"/>
		<screenshotservice:ScreenshotService id="screenshotService"
											 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
											 showBusyCursor="true" result="listScreenshotReady(event)"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Label includeIn="loadingList" x="179" y="134" text="Loading List"/>
	<s:Label id="lbl_loading_image" includeIn="showing" x="179" y="134" text="Loading Image" visible="false"/>
	<s:Group id="theImageBox" visible.showing="true" visible.loadingList="false" visible.State1="false" x="0" y="0" width="100%" top="0" bottom="20"/>
    <s:Button label="next" id="nextButton" visible.showing="true" visible.loadingList="false" visible.State1="false" width="100" height="20" bottom="0" right="0" click="gotoNextScreenshot(event)"/>
    <s:Button label="previous" id="previousButton" visible.showing="true" visible.loadingList="false" visible.State1="false" width="100" height="20" bottom="0" right="100" click="gotoPreviousScreenshot(event)"/>
	<s:List id="list" includeIn="State1" x="194" y="90"
			creationComplete="list_creationCompleteHandler(event)" labelField="filename">
		<s:AsyncListView list="{getScreenshotByTraceUrisResult.lastResult}"/>
	</s:List>
</s:Group>
