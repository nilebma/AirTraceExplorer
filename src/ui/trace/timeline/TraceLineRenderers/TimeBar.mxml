<?xml version="1.0" encoding="utf-8"?>
<timeline:CurseurBase direction="horizontal" backgroundColor="#222277" cornerRadius="5" width="50" height="20"
						 xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:timeline="ui.trace.timeline.*"
						 implements="ui.trace.timeline.TraceLineRenderers.ITraceRenderer" 
						 creationComplete="init()" currentState="preview"
                         zoomChange="onCursorMove(event)" zoomMove="onCursorMove(event)" >
	
	<mx:Style>
		
		
		.Grid{
			upSkin:Embed("timeline/curseurThinVerticalGrip.png");
			overSkin:Embed("timeline/curseurThinVerticalGrip.png");
			downSkin:Embed("timeline/curseurThinVerticalGrip.png");
		}
		
		.MiddleHorizontalGrid{
			upSkin:Embed("timeline/curseurBigHorizontalGrip.png");
			overSkin:Embed("timeline/curseurBigHorizontalGrip.png");
			downSkin:Embed("timeline/curseurBigHorizontalGrip.png");
		}
		
		
	</mx:Style>
	
	<mx:Script>
		<![CDATA[
            import com.ithaca.traces.Model;
            import com.ithaca.traces.Obsel;
            
            import flash.events.Event;
            
            import mx.core.UIComponent;
            import mx.events.PropertyChangeEvent;
            
            import ui.trace.timeline.TimelineModel;
            import ui.trace.timeline.TraceLineWithRenderers;
			
                public var minSize:uint = 10;
				protected var _traceData:Obsel;
				protected var _endTraceData:Obsel;
				protected var _parentLine:TraceLineWithRenderers;
            
            protected var _model:TimelineModel;
				
				protected var _selfSized:Boolean = true;
				protected var _selfPositioned:Boolean;
				
				protected function init():void
				{
					startEdge = 0;
                    if(parent && parent.width)
					    endEdge = parent.width;

				}
			
				public function set traceData(value:Obsel):void
				{
					_traceData = value;
					
					if(traceData)
						traceData.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, traceDataUpdate);
				}
				
				[Bindable]
				public function get traceData():Obsel
				{
					return _traceData;
				}
				
				public function set endTraceData(value:Obsel):void
				{
					_endTraceData = value;
					
					if(traceData)
						traceData.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, traceDataUpdate);
				}
				
				public function get endTraceData():Obsel
				{
					return _endTraceData;
				}
            
                protected function onCursorMove(event:Event):void
                {
                    if(_traceData)
                    {
                        traceData.removeEventListener(PropertyChangeEvent.PROPERTY_CHANGE, traceDataUpdate);
                        _traceData.begin =  _parentLine.getTimeFromPos(this.x);
                        _traceData.end = _parentLine.getTimeFromPos(this.x+this.width);
                        traceData.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, traceDataUpdate);
                    }

                    
                }
				
				public function traceDataUpdate(e:Event = null):void
				{
                    updateSizeAndPos();
				}
            
                protected function updateSizeAndPos():void
                {

                    
                    var pos:Number;
                    var size:Number = 0;
                    
                    if(_traceData && _traceData.begin)
                    {
                        pos = _parentLine.getPosFromTime(_traceData.begin);
                        
                        if(_endTraceData && _endTraceData.end)
                            size = _parentLine.getPosFromTime(_endTraceData.end) - pos;
                        else if(_endTraceData && _endTraceData.begin)
                            size = _parentLine.getPosFromTime(_endTraceData.begin) - pos;
                        else if(_traceData.end)
                            size = _parentLine.getPosFromTime(_traceData.end) - pos;
                        
                        size = Math.max(size, minSize);
                        
                    }
                    
                    if(_parentLine.direction == "horizontal")
                    {
                        this.x = pos;
                        this.width = size;
                    }
                    //else #TODO

                    
                }
            
                
				
				
				public function modelUpdate(e:Event = null):void
				{
					;
				}
				
				public function set parentLine(parent:TraceLineWithRenderers):void
				{
					_parentLine = parent;
				}
				
				public function get parentLine():TraceLineWithRenderers
				{
					return _parentLine;
				}
            
                [Bindable]
                public function set model(value:TimelineModel):void
                {
                    _model = value;
                    
                    if(model)
                        model.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, modelUpdate);
                }
                
                public function get model():TimelineModel
                {
                    return _model;
                }
    				
				public function set selfSized(value:Boolean):void
				{
					_selfSized = value;
				}
				
				public function get selfSized():Boolean
				{
					return _selfSized;
				}
				
				public function set selfPositioned(value:Boolean):void
				{
					_selfPositioned = value;
				}
				
				public function get selfPositioned():Boolean
				{
					return _selfPositioned;
				}
				
				public function update():void
				{
                    updateSizeAndPos();
				}
			


            
        ]]>
	</mx:Script>
	<timeline:states>
		<mx:State name="normal"/>
		<mx:State name="preview"/>
	</timeline:states>
	
	<mx:Button id="middleGripGraphic" styleName="MiddleHorizontalGrid" horizontalCenter="0" verticalCenter="0"/>
	
	<mx:Button id="middleGrip" horizontalCenter="-1"  verticalCenter="0" height="18" minWidth="20" mouseDown="centerStartDrag(event)"  
			   buttonMode="true"  alpha="0" left="10" right="10"
			   />
	
	<mx:Button id="startGripGraphic" styleName="Grid" left="2" verticalCenter="0"/>
	
	<mx:Button id="startGrip" x="0" y="0"  mouseDown="startGripStartDrag(event)" buttonMode="true" 
			   useHandCursor="true"  width="8" height="20" alpha="0.0"
			   />
	
	<mx:Button id="endGripGraphic" styleName="Grid" right="2" verticalCenter="0"/>
	
	<mx:Button id="endGrip"  y="0" right="0" mouseDown="endGripStartDrag(event)" 
			   buttonMode="true" useHandCursor="true" width="8" height="20" alpha="0.0"
			   />
	
	
	
</timeline:CurseurBase>
