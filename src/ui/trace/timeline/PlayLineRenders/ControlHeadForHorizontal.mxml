<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" height="100%" width="40">
	
	<mx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.greensock.easing.*;
			
			import com.greensock.*;
			
			import mx.formatters.DateFormatter;
			
			import ui.trace.timeline.PlayLine;
			import ui.trace.timeline.TimelineModel;
			
			public var model:TimelineModel;
			
			public var parentLine:PlayLine;
			
			[Bindable]
			private var _currentTime:Number;
			
			[Bindable]
			private var strTime:String;
			
			private var theDateFormatter:DateFormatter = new DateFormatter();
			
			[Bindable]
			public function get currentTime():Number
			{
				return _currentTime;
			}
			
			public function set currentTime(value:Number):void
			{
				_currentTime = value;
				
				setCurrentTime(value);
			}
			
			public function setCurrentTime(time:Number):void
			{
				if(!isNaN(time))
				{
					
					theDateFormatter.formatString = "NN:SS";
					
					strTime = theDateFormatter.format(new Date(time));
					
				}
			}
			
			
			private function startDraging(e:MouseEvent):void
			{
				//this.startDrag(false,new Rectangle(this.x,topEdge,0,bottomEdge - topEdge - this.height));				
				
				stage.addEventListener(MouseEvent.MOUSE_MOVE,draging);
				stage.addEventListener(MouseEvent.MOUSE_UP,stopDraging);
				
			}
			
			private function draging(e:MouseEvent):void
			{
				
				//We are here intersted in the X of the mouse in the context of the parent of our object
				//We then egt the coordinates of the mouse in this context
				var parentMouse:Point = this.parent.globalToLocal(new Point(e.stageX, e.stageY));
				
				var toX:Number = parentMouse.x;
				
				//We check if we are not above the defined topEdge
				toX = Math.max(parentLine.startPadding - this.width/2,toX);
				
				//We also check that we are not under the bottomEdge
				toX = Math.min(toX, parentLine.width - parentLine.endPadding - this.width/2);
				
				//Finally we set the new X value to our object (with a tween)
				TweenMax.to(this,.6,{x:toX, ease:Back.easeOut, onUpdate:userMove});
				
			}
			
			private function stopDraging(e:MouseEvent):void
			{
				
				this.stopDrag();
				
				stage.removeEventListener(MouseEvent.MOUSE_MOVE,draging);
				stage.removeEventListener(MouseEvent.MOUSE_UP,stopDraging);
			}
			
			private function userMove(e:Event = null):void
			{
				if(model)	
					model.setCurrentTime(parentLine.getTimeFromPos(this.x + this.width/2));
				else
					parentLine.rendererTimeUpdate(parentLine.getTimeFromPos(this.x + this.width/2));
			}
			
		]]>
	</mx:Script>
	
	<mx:Canvas width="3" borderColor="#A60000" backgroundColor="#AE0000" top="0" bottom="33" horizontalCenter="0">
	</mx:Canvas>
	
	<mx:Image source="@Embed('timeline/ControlableHeadGripHorizontal.png')" bottom="20" 
			  mouseDown="startDraging(event)" useHandCursor="true" buttonMode="true" horizontalCenter="0"/>
	
	<mx:Label x="-0.75" text="{strTime}" color="#A60000" fontWeight="bold" fontSize="10" bottom="0" width="41.4" 
			  height="19" textAlign="center" horizontalCenter="0"/>
	
</mx:Canvas>
